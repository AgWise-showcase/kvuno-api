name: "kvuno-api"

services:
  pgsql:
    container_name: pgsql
    hostname: pgsql
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - pgsql-data:/var/lib/postgresql/data
      - ./pgsql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh # Mount from pgsql folder
    ports:
      - "5432:5432"
    networks:
      - internal
      - web

  kvuno:
    container_name: kvuno
    hostname: kvuno
    image: masgeek/kvuno-api:${TAG_VERSION-latest}

    environment:
      DEBUG_DB: ${DEBUG_DB-0}
      DB_URL: ${KVUNO_DB_URL}
      LOG_LEVEL: ${KVUNO_LOG_LEVEL-info}
      SERVER_URL_PROD: ${SERVER_URL_PROD-https://kvuno-api.eastus.cloudapp.azure.com}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://kvuno:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    restart: unless-stopped

    volumes:
      - rds_data:/app/static/data:rw

    depends_on:
      - pgsql
      
    ports:
      - "8080:5000"
    
    networks:
      - web
      - internal

  migration:
    image: masgeek/kvuno-api:${TAG_VERSION-latest}
    container_name: migration
    command: ["alembic", "upgrade", "head"]
    environment:
      DEBUG_DB: ${DEBUG_DB-0}
      DB_URL: ${KVUNO_DB_URL}
      LOG_LEVEL: ${KVUNO_LOG_LEVEL-info}
      SERVER_URL_PROD: ${SERVER_URL_PROD-https://kvuno-api.eastus.cloudapp.azure.com}
    restart: no
    
    volumes:
      - rds_data:/app/static/data:ro
    depends_on:
      - pgsql
    networks:
      - internal

  housekeeper:
    image: masgeek/kvuno-api:${TAG_VERSION-latest}
    container_name: housekeeper
    command: ["python3", "housekeeping.py"]
    environment:
      DEBUG_DB: ${DEBUG_DB-0}
      DB_URL: ${KVUNO_DB_URL}
      LOG_LEVEL: ${KVUNO_LOG_LEVEL-info}
      SERVER_URL_PROD: ${SERVER_URL_PROD-https://kvuno-api.eastus.cloudapp.azure.com}
    restart: no
    volumes:
      - rds_data:/app/static/data:rw

    depends_on:
      - pgsql
    networks:
      - internal

  pgadmin:
      container_name: pgadmin
      hostname: pgadmin
      image: dpage/pgadmin4
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL:-dev@dev.com}
        PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
        PGADMIN_CONFIG_SERVER_MODE: 'True'
        PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
        PGADMIN_CONFIG_LOGIN_BANNER: '"Authorised users only!"'
      volumes:
        - pg-admin:/var/lib/pgadmin

      ports:
        - "${PGADMIN_PORT:-5050}:80"
      networks:
        - web
        - internal
      restart: unless-stopped
      depends_on:
        - pgsql
        
networks:
  internal:
    external: false
  web:
    external: true

volumes:
  pgsql-data:
    name: pgsql-data
    driver: local
  pg-admin:
    name: pg-admin
    driver: local
  rds_data:
    driver: local
    driver_opts:
      type: none
      device: ./rds
      o: bind